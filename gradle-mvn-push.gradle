/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

version = POM_VERSION_NAME
group = POM_GROUP_ID

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenInstaller {
        pom.groupId = POM_GROUP_ID
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = POM_VERSION_NAME
      }
    }
  }

  install {
    repositories.mavenInstaller {
      pom.groupId = POM_GROUP_ID
      pom.artifactId = POM_ARTIFACT_ID
      pom.version = POM_VERSION_NAME

      pom.project {
        name POM_NAME
        packaging POM_PACKAGING
        description POM_DESCRIPTION
        url POM_URL

        scm {
          connection POM_SCM_CONNECTION
          developerConnection POM_SCM_DEV_CONNECTION
          url POM_SCM_URL
        }

        licenses {
          license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
          }
        }

        developers {
          developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
          }
        }
      }
    }
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }
}

File localProperties = project.rootProject.file('local.properties')
Properties properties = new Properties()
if (localProperties.exists()) {
  properties.load(localProperties.newDataInputStream())
}

bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")

  configurations = ['archives']
  pkg {
    userOrg = POM_DEVELOPER_ID
    repo = POM_REPO
    name = POM_NAME
    desc = POM_DESCRIPTION
    websiteUrl = POM_URL
    vcsUrl = POM_SCM_URL
    licenses = [POM_LICENCE_NAME]
    publish = true
    publicDownloadNumbers = true
    version {
      desc = POM_DESCRIPTION
    }
  }
}